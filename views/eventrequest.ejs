<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Propose an Event â€” AURA</title>
    <meta name="description" content="Request a new event on the AURA alumni nexus."/>
    <link rel="icon" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='64' height='64'%3E%3Cdefs%3E%3ClinearGradient id='g' x1='0' y1='0' x2='1' y2='1'%3E%3Cstop offset='0%25' stop-color='%23d4af37'/%3E%3Cstop offset='100%25' stop-color='%23a16207'/%3E%3C/linearGradient%3E%3C/defs%3E%3Ccircle cx='32' cy='32' r='30' fill='url(%23g)'/%3E%3Ctext x='32' y='42' font-size='32' text-anchor='middle' fill='white' font-family='Arial Black'%3EA%3C/text%3E%3C/svg%3E" />

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&family=Playfair+Display:wght@700;800&display=swap" rel="stylesheet">

    <!-- Libraries -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>

    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        background: '#f8f5f2',
                        foreground: '#1f1c18',
                        card: '#ffffff',
                        'card-foreground': '#1f1c18',
                        primary: '#a16207',
                        'primary-foreground': '#ffffff',
                        secondary: '#b99553',
                        border: 'rgba(0, 0, 0, 0.08)',
                        ring: 'rgba(161, 98, 7, 0.4)'
                    },
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                        serif: ['Playfair Display', 'serif']
                    },
                    boxShadow: {
                        'soft': '0 4px 12px rgba(0, 0, 0, 0.05)',
                        'lift': '0 10px 25px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1)',
                    },
                    keyframes: {
                        'fade-in-up': { '0%': { opacity: 0, transform: 'translateY(20px)' }, '100%': { opacity: 1, transform: 'translateY(0)' } },
                        'backgroundShift': {
                            '0%, 100%': { backgroundPosition: '0% 50%' },
                            '50%': { backgroundPosition: '100% 50%' },
                        }
                    },
                    animation: {
                        'fade-in-up': 'fade-in-up 0.8s ease-out forwards',
                        'backgroundShift': 'backgroundShift 25s ease infinite',
                    }
                }
            }
        }
    </script>

    <style>
        html { scroll-behavior: smooth; }
        body {
            background: linear-gradient(-45deg, #f8f5f2, #fffefc, #fef8f0, #f8f5f2);
            background-size: 400% 400%;
            animation: backgroundShift 25s ease infinite;
        }
        .glass-header {
            background: rgba(255, 253, 250, 0.85);
            backdrop-filter: blur(12px); -webkit-backdrop-filter: blur(12px);
            border-bottom: 1px solid var(--tw-color-border);
        }
        #particle-canvas { position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: -1; opacity: 0.6; }
        .cta-button {
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(161, 98, 7, 0.2), 0 1px 3px rgba(0, 0, 0, 0.08);
        }
        .cta-button:hover {
            transform: translateY(-3px);
            box-shadow: var(--tw-shadow-lift);
        }
        .form-input:focus {
            outline: none;
            border-color: var(--tw-color-primary);
            box-shadow: 0 0 0 3px rgba(161, 98, 7, 0.15);
        }
        .category-btn {
            transition: all 0.2s ease-in-out;
        }
        .category-btn.selected {
            border-color: var(--tw-color-primary);
            background-color: rgba(161, 98, 7, 0.1);
            color: var(--tw-color-primary);
        }
    </style>
</head>
<body class="bg-background font-sans antialiased text-foreground">
    <canvas id="particle-canvas"></canvas>

    <header class="fixed top-0 inset-x-0 z-40 glass-header">
        <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
            <div class="relative flex h-16 items-center justify-center">
                 <div class="absolute left-0">
                     <a href="/student/dashboard" class="flex items-center gap-2 text-gray-600 hover:text-primary transition-colors font-semibold">
                        <i data-lucide="arrow-left" class="w-5 h-5"></i>
                        Back to Dashboard
                    </a>
                </div>
                <div class="flex items-center">
                    <a href="/" class="text-3xl font-serif font-bold text-primary">Aura</a>
                </div>
            </div>
        </div>
    </header>

    <main class="min-h-screen flex items-center justify-center pt-24 pb-12 px-4">
        <div class="w-full max-w-5xl bg-card rounded-xl shadow-lift grid grid-cols-1 md:grid-cols-2 animate-fade-in-up">
             <!-- Form Panel -->
            <div class="p-8 md:p-12">
                <div class="text-center md:text-left">
                    <h2 class="text-3xl font-serif font-bold text-foreground">Propose an Experience</h2>
                    <p class="text-gray-500 mt-2">Shape the dialogue within our community. Share your vision and we'll help bring it to life.</p>
                </div>
                
                <form action="/student/eventrequest" method="POST" class="mt-8 space-y-6">
                    <div>
                        <label for="title" class="block text-sm font-semibold text-gray-700 mb-2">Title of the Event</label>
                        <input type="text" name="title" id="title" placeholder="e.g., The Future of AI in FinTech" class="form-input w-full px-4 py-3 border border-border rounded-lg transition-shadow" required>
                    </div>
                    <div>
                        <label for="description" class="block text-sm font-semibold text-gray-700 mb-2">The Core Idea</label>
                        <textarea name="description" id="description" placeholder="Describe the purpose, takeaways, and target audience." rows="4" class="form-input w-full px-4 py-3 border border-border rounded-lg transition-shadow" required></textarea>
                    </div>
                     <div>
                        <label class="block text-sm font-semibold text-gray-700 mb-2">Event Category</label>
                        <div class="grid grid-cols-2 gap-3" id="category-options">
                             <button type="button" data-category="Webinar" class="category-btn flex items-center justify-center gap-2 p-3 border border-border rounded-lg font-medium text-gray-600 selected"><i data-lucide="monitor-speaker" class="w-4 h-4"></i>Webinar</button>
                             <button type="button" data-category="Workshop" class="category-btn flex items-center justify-center gap-2 p-3 border border-border rounded-lg font-medium text-gray-600"><i data-lucide="wrench" class="w-4 h-4"></i>Workshop</button>
                             <button type="button" data-category="Panel" class="category-btn flex items-center justify-center gap-2 p-3 border border-border rounded-lg font-medium text-gray-600"><i data-lucide="users" class="w-4 h-4"></i>Panel</button>
                             <button type="button" data-category="Networking" class="category-btn flex items-center justify-center gap-2 p-3 border border-border rounded-lg font-medium text-gray-600"><i data-lucide="message-square" class="w-4 h-4"></i>Networking</button>
                        </div>
                         <input type="hidden" name="category" id="category-input" value="Webinar">
                    </div>
                    
                    <div class="pt-2">
                        <button type="submit" class="w-full py-3 bg-primary text-primary-foreground rounded-lg font-bold uppercase tracking-wider cta-button">Submit Proposal</button>
                    </div>
                </form>
            </div>
            <!-- Live Preview Panel -->
            <div class="hidden md:flex flex-col items-center justify-center p-8 md:p-12 bg-background/50 rounded-r-xl">
                 <h3 class="text-xl font-serif font-bold text-foreground mb-4">Live Preview</h3>
                 <div class="w-full max-w-xs bg-card rounded-xl shadow-lift p-6">
                    <div class="mb-4">
                        <div class="h-32 rounded-lg bg-cover bg-center" style="background-image: url('https://images.unsplash.com/photo-1543269865-cbf427effbad?q=80&w=2070')"></div>
                        <div id="preview-category" class="mt-3 text-xs font-bold uppercase tracking-widest text-primary">Webinar</div>
                    </div>
                    <h4 id="preview-title" class="text-2xl font-serif font-bold text-foreground leading-tight">Your Event Title</h4>
                    <p id="preview-description" class="text-sm text-gray-500 mt-2 h-20 overflow-hidden">Your description will appear here as you type...</p>
                 </div>
            </div>
        </div>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            lucide.createIcons();
            
            // Live Preview Logic
            const titleInput = document.getElementById('title');
            const descriptionInput = document.getElementById('description');
            const previewTitle = document.getElementById('preview-title');
            const previewDescription = document.getElementById('preview-description');
            const previewCategory = document.getElementById('preview-category');
            const categoryOptions = document.getElementById('category-options');
            const categoryInput = document.getElementById('category-input');

            titleInput.addEventListener('input', () => {
                previewTitle.textContent = titleInput.value || 'Your Event Title';
            });

             descriptionInput.addEventListener('input', () => {
                previewDescription.textContent = descriptionInput.value || 'Your description will appear here...';
            });

            categoryOptions.addEventListener('click', (e) => {
                const button = e.target.closest('button');
                if (!button) return;

                document.querySelectorAll('.category-btn').forEach(btn => btn.classList.remove('selected'));
                button.classList.add('selected');

                const category = button.dataset.category;
                previewCategory.textContent = category;
                categoryInput.value = category;
            });
            
            // Particle Animation Script
            const canvas = document.getElementById('particle-canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            let particles = [];
            const particleColor = 'rgba(161, 98, 7, 0.4)';

            class Particle {
                constructor(x, y) { this.x = x; this.y = y; this.size = Math.random() * 1.5 + 1; this.speedX = Math.random() * 0.3 - 0.15; this.speedY = Math.random() * 0.3 - 0.15; }
                update() { this.x += this.speedX; this.y += this.speedY; if (this.size > 0.1) this.size -= 0.005; }
                draw() { ctx.fillStyle = particleColor; ctx.beginPath(); ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2); ctx.fill(); }
            }
            function initParticles() {
                for (let i = 0; i < 50; i++) { particles.push(new Particle(Math.random() * canvas.width, Math.random() * canvas.height)); }
            }
            function animateParticles() {
                if (!canvas) return;
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                for (let i = 0; i < particles.length; i++) {
                    particles[i].update(); particles[i].draw();
                    if (particles[i].size <= 0.1) { particles.splice(i, 1); i--; particles.push(new Particle(Math.random() * canvas.width, Math.random() * canvas.height)); }
                }
                requestAnimationFrame(animateParticles);
            }
            initParticles();
            animateParticles();

            window.addEventListener('resize', () => { 
                if(canvas){
                    canvas.width = window.innerWidth; 
                    canvas.height = window.innerHeight; 
                    particles = []; 
                    initParticles(); 
                }
            });
        });
    </script>
</body>
</html>


<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Event Proposals â€” SAMPARK</title>
    <meta name="description" content="View and vote on event proposals from the SAMPARK community."/>
    <link rel="icon" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='64' height='64'%3E%3Cdefs%3E%3ClinearGradient id='g' x1='0' y1='0' x2='1' y2='1'%3E%3Cstop offset='0%25' stop-color='%23d4af37'/%3E%3Cstop offset='100%25' stop-color='%23a16207'/%3E%3C/linearGradient%3E%3C/defs%3E%3Ccircle cx='32' cy='32' r='30' fill='url(%23g)'/%3E%3Ctext x='32' y='42' font-size='32' text-anchor='middle' fill='white' font-family='Arial Black'%3EA%3C/text%3E%3C/svg%3E" />

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&family=Playfair+Display:wght@700;800&display=swap" rel="stylesheet">

    <!-- Libraries -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>

    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        background: '#f8f5f2',
                        foreground: '#1f1c18',
                        card: '#ffffff',
                        'card-foreground': '#1f1c18',
                        primary: '#a16207',
                        'primary-foreground': '#ffffff',
                        secondary: '#b99553',
                        border: 'rgba(0, 0, 0, 0.08)',
                    },
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                        serif: ['Playfair Display', 'serif']
                    },
                    boxShadow: {
                        'soft': '0 4px 12px rgba(0, 0, 0, 0.05)',
                        'lift': '0 10px 25px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1)',
                    },
                    keyframes: {
                        'fade-in-up': { '0%': { opacity: 0, transform: 'translateY(20px)' }, '100%': { opacity: 1, transform: 'translateY(0)' } },
                        'backgroundShift': {
                            '0%, 100%': { backgroundPosition: '0% 50%' },
                            '50%': { backgroundPosition: '100% 50%' },
                        }
                    },
                    animation: {
                        'fade-in-up': 'fade-in-up 0.8s ease-out forwards',
                        'backgroundShift': 'backgroundShift 25s ease infinite',
                    }
                }
            }
        }
    </script>

    <style>
        html { scroll-behavior: smooth; }
        body {
            background: linear-gradient(-45deg, #f8f5f2, #fffefc, #fef8f0, #f8f5f2);
            background-size: 400% 400%;
            animation: backgroundShift 25s ease infinite;
        }
        .glass-header {
            background: rgba(255, 253, 250, 0.85);
            backdrop-filter: blur(12px); -webkit-backdrop-filter: blur(12px);
            border-bottom: 1px solid var(--tw-color-border);
        }
        #particle-canvas { position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: -1; opacity: 0.6; }
        .nav-link {
            transition: all 0.2s ease-in-out;
            border-bottom: 2px solid transparent;
        }
        .nav-link.active, .nav-link:hover {
            color: var(--tw-color-primary);
            border-bottom-color: var(--tw-color-primary);
        }
        .cta-button {
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(161, 98, 7, 0.2), 0 1px 3px rgba(0, 0, 0, 0.08);
        }
        .cta-button:hover {
            transform: translateY(-3px);
            box-shadow: var(--tw-shadow-lift);
        }
    </style>
</head>
<body class="bg-background font-sans antialiased text-foreground">
    <canvas id="particle-canvas"></canvas>

    <header class="fixed top-0 inset-x-0 z-40 glass-header">
      <div class="mx-auto max-w-screen-xl px-4 sm:px-6 lg:px-8">
        <div class="relative flex h-16 items-center justify-between">
          <a href="/" class="text-3xl font-serif font-bold text-primary">SAMPARK</a>
          <a
            href="/logout"
            class="px-4 py-2 rounded-md bg-primary text-primary-foreground hover:bg-primary/90 transition-colors font-semibold shadow-soft flex items-center gap-2"
          >
            <i data-lucide="log-out" class="w-4 h-4"></i>
            Logout
          </a>
        </div>
      </div>
    </header>

    <main class="pt-16">
        <nav class="bg-card border-b border-border px-4 py-2 sticky top-16 z-30">
            <div class="max-w-screen-xl mx-auto flex justify-center items-center">
              <div class="flex gap-4 overflow-x-auto">
                 <a href="/student/dashboard" class="nav-link flex-shrink-0 flex items-center gap-2 px-3 py-2 text-sm font-semibold"><i data-lucide="layout-dashboard"></i>Dashboard</a>
                <a href="/student/connections" class="nav-link flex-shrink-0 flex items-center gap-2 px-3 py-2 text-sm font-semibold"><i data-lucide="users"></i>Connections</a>
                <a href="/student/posts" class="nav-link flex-shrink-0 flex items-center gap-2 px-3 py-2 text-sm font-semibold"><i data-lucide="newspaper"></i>Posts</a>
                <a href="/student/referrals" class="nav-link flex-shrink-0 flex items-center gap-2 px-3 py-2 text-sm font-semibold"><i data-lucide="handshake"></i>Ask for Referral</a>
                <a href="/student/map" class="nav-link flex-shrink-0 flex items-center gap-2 px-3 py-2 text-sm font-semibold"><i data-lucide="map"></i>Alumni Map</a>
                <a href="/student/events" class="nav-link active flex-shrink-0 flex items-center gap-2 px-3 py-2 text-sm font-semibold"><i data-lucide="calendar"></i>Events</a>
                <a href="/student/profile" class="nav-link flex-shrink-0 flex items-center gap-2 px-3 py-2 text-sm font-semibold"><i data-lucide="user-circle"></i>My Profile</a>
              </div>
            </div>
        </nav>

        <div class="min-h-[calc(100vh-128px)] flex items-center justify-center pt-8 pb-12 px-4">
            <div class="w-full max-w-4xl">
                <div class="bg-card rounded-xl shadow-lift overflow-hidden animate-fade-in-up">
                    <div class="h-48 bg-cover bg-center relative" style="background-image: url('https://images.unsplash.com/photo-1505373877841-8d25f7d46678?q=80&w=2012')">
                        <div class="absolute inset-0 bg-black/50"></div>
                        <div class="absolute inset-0 flex flex-col items-center justify-center text-white p-4">
                            <h1 class="text-4xl md:text-5xl font-serif font-bold text-center">Event Proposals</h1>
                            <p class="mt-2 text-center max-w-xl">Ideas from the community, powered by your vote. Help shape the future of our network.</p>
                        </div>
                    </div>
                    
                    <div class="p-6 md:p-8">
                        <div class="flex justify-end mb-6">
                            <a href="/student/eventrequest" class="cta-button inline-flex items-center gap-2 px-5 py-2.5 bg-primary text-primary-foreground rounded-lg font-bold uppercase tracking-wider text-sm">
                                <i data-lucide="plus" class="w-4 h-4"></i>
                                Propose an Event
                            </a>
                        </div>

                        <div class="space-y-6">
                            <% if (events && events.length > 0) { %>
                                <% events.forEach((event, index) => { %>
                                    <% 
                                        const requestedById = event.requestedBy && (event.requestedBy._id ? event.requestedBy._id.toString() : event.requestedBy.toString());
                                        const isAuthor = requestedById === currentUser._id.toString();
                                        const hasUpvoted = event.upvotedBy && event.upvotedBy.some(u => u.toString() === currentUser._id.toString());
                                    %>
                                    <div class="bg-white p-5 rounded-xl border border-border flex flex-col md:flex-row items-start gap-5 animate-fade-in-up" style="animation-delay: <%= 100 * (index + 1) %>ms;">
                                        <div class="flex-grow">
                                            <div class="flex items-center justify-between">
                                                <h2 class="text-2xl font-serif font-bold text-foreground leading-tight"><%= event.title %></h2>
                                                <span class="hidden md:inline-block px-3 py-1 text-xs font-semibold rounded-full <%= event.status === 'Pending' ? 'bg-yellow-100 text-yellow-800' : 'bg-green-100 text-green-800' %>">
                                                    <%= event.status %>
                                                </span>
                                            </div>
                                            <p class="text-gray-600 mt-2"><%= event.description %></p>
                                            <p class="text-xs text-gray-400 mt-3">Requested by: <span class="font-medium text-gray-600"><%= event.requestedBy ? event.requestedBy.fullname : "Unknown" %></span></p>
                                        </div>
                                        <div class="flex-shrink-0 w-full md:w-auto text-center">
                                            <% if (isAuthor) { %>
                                                <div class="px-4 py-2 text-sm text-green-700 font-semibold">You created this</div>
                                            <% } else if (hasUpvoted) { %>
                                                 <div class="flex items-center justify-center gap-2 px-4 py-2 text-sm text-green-700 font-semibold">
                                                    <i data-lucide="check-circle-2" class="w-5 h-5"></i>
                                                    <span>Upvoted (<%=event.upvotes%>)</span>
                                                </div>
                                            <% } else { %>
                                                <form action="/student/<%= event._id %>/upvote" method="POST">
                                                    <button type="submit" class="w-full md:w-auto cta-button bg-primary/10 text-primary font-semibold py-2 px-4 rounded-xl hover:bg-primary/20 transition-colors flex items-center justify-center gap-2">
                                                        <i data-lucide="arrow-up" class="w-4 h-4"></i>
                                                        Upvote (<%= event.upvotes %>)
                                                    </button>
                                                </form>
                                            <% } %>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <div class="bg-background/50 p-6 rounded-2xl border border-border text-center text-gray-500">
                                    <p>No event requests found. Be the first to propose one!</p>
                                </div>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            lucide.createIcons();
            
            const animatedElements = document.querySelectorAll('.animate-fade-in-up');
            const animationObserver = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const delay = entry.target.style.animationDelay || '0s';
                        entry.target.style.transition = `opacity 0.6s ease-out ${delay}, transform 0.6s ease-out ${delay}`;
                        entry.target.style.opacity = '1';
                        entry.target.style.transform = 'translateY(0)';
                        animationObserver.unobserve(entry.target);
                    }
                });
            }, { threshold: 0.1 });
            animatedElements.forEach(el => {
                el.style.opacity = '0';
                el.style.transform = 'translateY(20px)';
                animationObserver.observe(el);
            });

            const canvas = document.getElementById('particle-canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            let particles = [];
            const particleColor = 'rgba(161, 98, 7, 0.5)';

            class Particle {
                constructor(x, y) { this.x = x; this.y = y; this.size = Math.random() * 1.5 + 1; this.speedX = Math.random() * 0.4 - 0.2; this.speedY = Math.random() * 0.4 - 0.2; }
                update() { this.x += this.speedX; this.y += this.speedY; if (this.size > 0.1) this.size -= 0.005; }
                draw() { ctx.fillStyle = particleColor; ctx.beginPath(); ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2); ctx.fill(); }
            }
            function initParticles() {
                for (let i = 0; i < 50; i++) { particles.push(new Particle(Math.random() * canvas.width, Math.random() * canvas.height)); }
            }
            function animateParticles() {
                if (!canvas) return;
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                for (let i = 0; i < particles.length; i++) {
                    particles[i].update(); particles[i].draw();
                    if (particles[i].size <= 0.1) { particles.splice(i, 1); i--; particles.push(new Particle(Math.random() * canvas.width, Math.random() * canvas.height)); }
                }
                requestAnimationFrame(animateParticles);
            }
            initParticles();
            animateParticles();

            window.addEventListener('resize', () => { 
                if(canvas){
                    canvas.width = window.innerWidth; 
                    canvas.height = window.innerHeight; 
                    particles = []; 
                    initParticles(); 
                }
            });
        });
    </script>
</body>
</html>
